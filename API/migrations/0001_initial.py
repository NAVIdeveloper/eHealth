# Generated by Django 4.0.1 on 2022-06-15 10:18

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AboutUs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_uz', models.CharField(blank=True, max_length=40, null=True)),
                ('title_ru', models.CharField(blank=True, max_length=40, null=True)),
                ('title_en', models.CharField(blank=True, max_length=40, null=True)),
                ('img', models.ImageField(upload_to='info/')),
                ('uz_text', models.TextField()),
                ('en_text', models.TextField()),
                ('ru_text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Advice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uz_text', models.CharField(max_length=255)),
                ('en_text', models.CharField(max_length=255)),
                ('ru_text', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CardFastLossType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_uz', models.CharField(max_length=255)),
                ('title_ru', models.CharField(max_length=255)),
                ('title_en', models.CharField(max_length=255)),
                ('img', models.ImageField(upload_to='card/fastloss/')),
                ('text_uz', models.TextField()),
                ('text_ru', models.TextField()),
                ('text_en', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CategoryProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('en_name', models.CharField(max_length=255)),
                ('ru_name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='DayTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('weight_limit', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='FastLost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='fastlost/')),
                ('name_uz', models.CharField(blank=True, max_length=40, null=True)),
                ('name_ru', models.CharField(blank=True, max_length=40, null=True)),
                ('name_en', models.CharField(blank=True, max_length=40, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Footer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=55, null=True)),
                ('phone', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('facebook', models.URLField()),
                ('instagram', models.URLField()),
                ('telegram', models.URLField()),
                ('application', models.URLField()),
                ('work_time', models.TextField()),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='HealthApp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(upload_to='healthapp/')),
                ('title_uz', models.CharField(max_length=255)),
                ('title_en', models.CharField(max_length=255)),
                ('title_ru', models.CharField(max_length=255)),
                ('text_uz', models.TextField()),
                ('text_en', models.TextField()),
                ('text_ru', models.TextField()),
                ('text2_uz', models.CharField(max_length=255)),
                ('text2_en', models.CharField(max_length=255)),
                ('text2_ru', models.CharField(max_length=255)),
                ('img', models.ImageField(upload_to='healthapp/')),
            ],
        ),
        migrations.CreateModel(
            name='New',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(max_length=999999, upload_to='news/')),
                ('title', models.CharField(max_length=255)),
                ('text', models.TextField(blank=True, null=True)),
                ('en_title', models.CharField(max_length=255)),
                ('en_text', models.TextField(blank=True, null=True)),
                ('ru_title', models.CharField(max_length=255)),
                ('ru_text', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Normal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_start', models.IntegerField()),
                ('age_end', models.IntegerField()),
                ('height', models.IntegerField(unique=True)),
                ('male_weight', models.FloatField()),
                ('female_weight', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('en_name', models.CharField(max_length=255)),
                ('ru_name', models.CharField(max_length=255)),
                ('kaloriya', models.FloatField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.categoryproduct')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_uz', models.TextField()),
                ('answer_uz', models.TextField()),
                ('question_ru', models.TextField()),
                ('answer_ru', models.TextField()),
                ('question_en', models.TextField()),
                ('answer_en', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SearchStatic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_uz', models.CharField(max_length=255)),
                ('title_ru', models.CharField(max_length=255)),
                ('title_en', models.CharField(max_length=255)),
                ('text_uz', models.TextField()),
                ('text_en', models.TextField()),
                ('text_ru', models.TextField()),
                ('img', models.ImageField(upload_to='static/search/')),
            ],
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('en_name', models.CharField(max_length=255)),
                ('ru_name', models.CharField(max_length=255)),
                ('video', models.URLField(blank=True, null=True)),
                ('kaloriya', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='TypeIll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_uz', models.CharField(max_length=255)),
                ('title_ru', models.CharField(max_length=255)),
                ('title_en', models.CharField(max_length=255)),
                ('text1_uz', models.TextField()),
                ('text1_ru', models.TextField()),
                ('text1_en', models.TextField()),
                ('text2_uz', models.TextField()),
                ('text2_ru', models.TextField()),
                ('text2_en', models.TextField()),
                ('text3_uz', models.TextField()),
                ('text3_ru', models.TextField()),
                ('text3_en', models.TextField()),
                ('text4_uz', models.TextField()),
                ('text4_ru', models.TextField()),
                ('text4_en', models.TextField()),
                ('text5_uz', models.TextField()),
                ('text5_ru', models.TextField()),
                ('text5_en', models.TextField()),
                ('img', models.ImageField(upload_to='ill/')),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('intended_weight', models.PositiveIntegerField(default=1)),
                ('last_update', models.DateTimeField(blank=True, null=True)),
                ('chorshanba', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='day3', to='API.daytask')),
                ('dushanba', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='day1', to='API.daytask')),
                ('juma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='day5', to='API.daytask')),
                ('payshanba', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='day4', to='API.daytask')),
                ('seshanba', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='day2', to='API.daytask')),
                ('shanba', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='day6', to='API.daytask')),
                ('yakshanba', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='day7', to='API.daytask')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='profile/')),
                ('going_to_loss', models.IntegerField(blank=True, default=0, null=True)),
                ('user_type', models.IntegerField(choices=[(1, 'client'), (2, 'sportsmen'), (3, 'dietolog')], default=1)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('network', models.URLField(blank=True, null=True)),
                ('reyting', models.FloatField(blank=True, default=0, null=True)),
                ('reyting_count', models.IntegerField(blank=True, default=0, null=True)),
                ('gender', models.IntegerField(blank=True, choices=[(1, 'Erkak'), (2, 'Ayol')], null=True)),
                ('week_result', models.IntegerField(blank=True, default=0, null=True)),
                ('avarage', models.IntegerField(blank=True, default=0, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('task_type', models.IntegerField(blank=True, choices=[(1, 'Dieta'), (2, 'Sport'), (3, 'All')], null=True)),
                ('addres', models.CharField(blank=True, max_length=255, null=True)),
                ('experience', models.IntegerField(default=1)),
                ('information', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3)], default=1)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('task_dieta_can_not', models.ManyToManyField(blank=True, related_name='NoDieta', to='API.Product')),
                ('task_sport_can_not', models.ManyToManyField(blank=True, to='API.Sport')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('weekly_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='API.weeklyprogram')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TaskSport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.IntegerField()),
                ('total_calories', models.IntegerField()),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.sport')),
            ],
        ),
        migrations.CreateModel(
            name='TaskDieta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grams', models.IntegerField()),
                ('total_calories', models.IntegerField()),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.product')),
            ],
        ),
        migrations.CreateModel(
            name='HistoryTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('steps', models.IntegerField(default=0)),
                ('morning_sport', models.BooleanField(default=False)),
                ('morning_diet', models.BooleanField(default=False)),
                ('afternoon_sport', models.BooleanField(default=False)),
                ('afternoon_diet', models.BooleanField(default=False)),
                ('night_sport', models.BooleanField(default=False)),
                ('night_diet', models.BooleanField(default=False)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='API.daytask')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HistoryReyting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('star', models.IntegerField()),
                ('expert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='daytask',
            name='afternoon_diet',
            field=models.ManyToManyField(blank=True, related_name='dieta_time2', to='API.TaskDieta'),
        ),
        migrations.AddField(
            model_name='daytask',
            name='afternoon_sport',
            field=models.ManyToManyField(blank=True, related_name='sport_time2', to='API.TaskSport'),
        ),
        migrations.AddField(
            model_name='daytask',
            name='morning_diet',
            field=models.ManyToManyField(blank=True, related_name='dieta_time1', to='API.TaskDieta'),
        ),
        migrations.AddField(
            model_name='daytask',
            name='morning_sport',
            field=models.ManyToManyField(blank=True, related_name='sport_time1', to='API.TaskSport'),
        ),
        migrations.AddField(
            model_name='daytask',
            name='night_diet',
            field=models.ManyToManyField(blank=True, related_name='dieta_time3', to='API.TaskDieta'),
        ),
        migrations.AddField(
            model_name='daytask',
            name='night_sport',
            field=models.ManyToManyField(blank=True, related_name='sport_time3', to='API.TaskSport'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
